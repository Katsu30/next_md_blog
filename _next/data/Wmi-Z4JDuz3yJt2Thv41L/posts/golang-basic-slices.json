{"pageProps":{"post":{"title":"【Go】基本的なスライス型の使い方","date":"2023-05-02","slug":"golang-basic-slices","content":"<h2 id=\"概要\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#概要\"><span class=\"icon icon-link\"></span></a>概要</h2>\n<p>『<a href=\"https://amzn.to/3LpcrlM\">初めての Go 言語</a>』という本を Go 言語の復習がてら読んでたので、気になったところや勉強したところをメモに残していきます。</p>\n<p><img src=\"/assets/blog/golang/40004_learning_go_cvr.jpg\" alt=\"初めてのGo言語\"></p>\n<h3 id=\"slice-の使いどころ\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#slice-の使いどころ\"><span class=\"icon icon-link\"></span></a><code>Slice</code> の使いどころ</h3>\n<p>実務上ではよく使用する<code>slice</code>。\n単に「配列」としか認識していませんでしたが、具体的には「可変長の配列」とのこと。</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">}</span>\n</code></pre>\n<p>たしかに、<code>append</code>をしたり、<code>len</code>だったりを確認するのはこの形のスライスだけだったなと改めて気が付きました。</p>\n<p><code>slice</code>の注意点としては、下記が上げられるかなと。</p>\n<ol>\n<li>初期値は指定しなければ <code>nil</code></li>\n<li>スライスと比較できるのは <code>nil</code> のみ</li>\n</ol>\n<p>これは、初期値が<code>nil</code>に起因しているようですね。</p>\n<h3 id=\"sliceで使用できるメソッド\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#sliceで使用できるメソッド\"><span class=\"icon icon-link\"></span></a><code>slice</code>で使用できるメソッド</h3>\n<ul>\n<li><code>len</code></li>\n<li><code>append</code></li>\n</ul>\n<p><code>len</code>は、配列の長さを確認するための関数です。\n<code>TypeScript</code>で言う<code>length</code>ですね。使い方も同じように使用できるので、特に難しいことはなさそう。\n使いどころとしては、レスポンスを返す際に配列要素がない場合にエラーを返したりする場合でしょうか。</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">.</span><span class=\"token builtin\">len</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorln</span><span class=\"token punctuation\">(</span>'<span class=\"token builtin\">error</span> was occured<span class=\"token punctuation\">.</span>'<span class=\"token punctuation\">)</span>\n</code></pre>\n<p><code>append</code>は、配列に要素を追加するための関数。<code>TypeScript</code>で言う<code>push</code>です。</p>\n<p>基本的な使い方は下記の通り。</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span>\nx <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// {1, 2, 3, 4}</span>\nx <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// {1, 2, 3, 4, 5, 6, 7}</span>\n</code></pre>\n<p>演算子の<code>...</code>を使用することで、別スライスの値を展開して追加することができます。</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> y <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">}</span>\nx <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token operator\">...</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// {1, 2, 3, 10, 20, 30}</span>\n</code></pre>\n<h3 id=\"スライスのスライス\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#スライスのスライス\"><span class=\"icon icon-link\"></span></a>スライスのスライス</h3>\n<p>スライスから新しいスライスを作成するためには、<code>[n:m]</code>の形式で作成する。\n<code>n</code>にはスライスの開始の配列番号を、<code>m</code>にはスライスの終了の配列番号を追加します。</p>\n<pre class=\"language-go\"><code class=\"language-go\">x <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">}</span>\na <span class=\"token operator\">:=</span> x<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\nb <span class=\"token operator\">:=</span> x<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\nc <span class=\"token operator\">:=</span> x<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1, 2]</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [2, 3, 4]</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [2, 3]</span>\n</code></pre>\n<p>上記のような書き方もできますが、スライスは<strong>メモリを共有する</strong>という特徴があるので、<code>append</code>や代入をサブスライス（作成されたスライス）に行う場合は、<strong>フルスライス式</strong>を使用したほうが懸命です。</p>\n<p>フルスライス式は、<code>[n:m:o]</code>の<code>o</code>にキャパシティを追加して作成するスライスです。</p>\n<pre class=\"language-go\"><code class=\"language-go\">x <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">}</span>\na <span class=\"token operator\">:=</span> x<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\nb <span class=\"token operator\">:=</span> x<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n\na <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span>\nb <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span>\n\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1, 2, 30, 40, 50</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 3, 4, 60</span>\n</code></pre>\n<h2 id=\"まとめ\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#まとめ\"><span class=\"icon icon-link\"></span></a>まとめ</h2>\n<p>備忘録として基本的なスライスの記述方法をまとめました。\n普段、フロントエンド寄りの技術を使用しているので、メモリの話など少し難しい部分がありますが、きちんと理解しておかないとここからの Gopher 道に影響が出そうなので、しっかりと学んでいきたいですね。</p>\n<p><a href=\"https://amzn.to/3LpcrlM\"><img src=\"/assets/blog/golang/40004_learning_go_cvr.jpg\" alt=\"初めてのGo言語\"></a></p>","ogImage":{"url":"/assets/blog/golang/golang_top_image.png"},"coverImage":"/assets/blog/golang/golang_top_image.png","excerpt":"基本的なスライス型を確認して、配列の操作で必要な点だったり","tags":["Go"]}},"__N_SSG":true}